A stereo-photo processing workflow of an advanced user may involve steps that the author of DualCam Companion application never thought about. Such a possibility is addressed by providing custom-command buttons.

DualCam Companion application enables the user to configure up to two arbitrary commands to be invoked through its GUI buttons. These buttons are "Cust1" and "Cust2".
The commands should be those from the user computer's operating system, not TCL procedures. E.g. whatever you can run from the computer's command prompt.

The intention is for custom command to run in a separate window, so that its possible failure cannot hurt the DualCam Companion from which it is launched.

In brief:
- the user provides OS-specific command line for the command
- upon pressing the corresponding button, DualCam Companion runs the command line while ensuring the current directory (for the command) is set to the current workarea root (above L/ and R/ subdirectories)
- the DualCam Companion GUI remains unresponsive until the command is finished; if the commnd has separate window, the latter should be closed for DualCam Companion GUI to become operational again

Command lines for the two custom commands are configured under "-custom_cmd_1" and "-custom_cmd_2" switches in the Preferences window.
The safest practice is to enter full path to a batch script in the Preferences, the one that doesn't need any command-line arguments. Any options are to be handled inside the script itself.

Building and configuring proper wrappers for custom commands.
------------------------------------------------------------
TODO

========================================================================
A background on invoking DOS commands
========================================================================
(from: http://stackoverflow.com/questions/9392874/bat-file-open-new-cmd-window-and-enter-code-in-there)


Use the following in your batch file:

start cmd.exe /k "more-batch-commands-here"

or

start cmd.exe /c "more-batch-commands-here"

    /c Carries out the command specified by string and then terminates
    /k Carries out the command specified by string but remains

Consult the cmd.exe documentation using cmd /? for more details.

The proper formating of the command string gets a little more complicated with spaces in the arguments. See the examples below. Note the use of nested double quotes in some examples.

Examples:

Run a program and pass a filename parameter:
CMD /c write.exe c:\docs\sample.txt

Run a program and pass a long filename:
CMD /c write.exe "c:\sample documents\sample.txt"

Spaces in program path:
CMD /c ""c:\Program Files\Microsoft Office\Office\Winword.exe""

Spaces in program path + parameters:
CMD /c ""c:\Program Files\demo.cmd"" Parameter1 Param2
CMD /k ""c:\batch files\demo.cmd" "Parameter 1 with space" "Parameter2 with space""

Launch demo1 and demo2:
CMD /c ""c:\Program Files\demo1.cmd" & "c:\Program Files\demo2.cmd""
========================================================================
