A stereo-photo processing workflow of an advanced user may involve steps that the author of DualCam-Companion application never thought about. Such a possibility is addressed by providing custom-command buttons.

DualCam-Companion application enables the user to configure up to two arbitrary commands to be invoked through its GUI buttons. These buttons are initially named "Cust1" and "Cust2", but could be customized through Preferences.
The commands should be either user computer's operating system executables of TCL script files, not TCL procedures. E.g. whatever you can run from the computer's command prompt.

The intention is for custom command to run in a separate window, so that its possible failure cannot hurt the DualCam-Companion from which it is launched.

In brief:
- the user provides OS-specific command line for the command
- upon pressing the corresponding button, DualCam-Companion runs the command line while ensuring the current directory (for the command) is set to the current workarea root (above L/ and R/ subdirectories)
- the DualCam-Companion GUI remains unresponsive until the command is finished; if the commnad has separate window, the latter should be closed for DualCam-Companion GUI to become operational again
- the DualCam-Companion GUI does not recognize whether the command succeeded or failed
-- if the commnad has separate window, the latter contains the indication of the command's status
-- if the commnad doesn't have separate window, all or part of the command's text output is copied into the log box of DualCam-Companion GUI when the command's execution is finished or aborted


There's an additional piece of data that DualCam-Companion GUI maintains especially  for custom commands - user-supplied path for a temporary directory ("-tmp_dir_for_custom_cmd" switch in the preferences). This path is just a hint; the command's code may or may not need a temporary directory, and in the former case it may or may not accept the suggested path.
Besides the above, a custom command is allowed to inspect the preferences and pick whatever value it needs. More on this - in "Building and configuring proper wrappers for custom commands" section.

Command lines for the two custom commands are configured under "-custom_cmd_1" and "-custom_cmd_2" switches in the Preferences window.
The safest practice is to enter only full path to a program file in the Preferences. The program file could be one of the following:
(a) a real executable binary (.exe on Windows)
(b) a shell script (batch file on Windows)
(c) TCL script
In case the executable in (a) or (b) needs any command-line arguments, wrap it in a shell script (DOS batch on Windows); handle the argumennts inside this script.
If option (c) is used, the provided TCL script will be executed by a new instance of the same TCL interpeter that runs DualCam-Companion.
The path stored in the Preferences should follow TCL syntax convention where slash (/) is used as a directory separator.
Options (a) and (b) require full absolute paths. Option (c) allows to use relative path for TCL script located anywhere under "StereoPairs_TCL" directory of the DualCam-Companion installation.


Building and configuring proper wrappers for custom commands.
------------------------------------------------------------

This section explains arrangements for supplement utilities supplied with Dualcam-Companion. It should help the users to configure most other commands by following a similar methodology.
The main idea is that the application to be run as a custom command is considered a "black box". The user shouldn't bother with how it works or how it is implemented. Instead the user only knows what the application does and how to control it through the command line. The user should supply wrapper scripts that adapt the application's command line to the single executable path entered in DualCam-Companion Preferences.


The utilities are writen either in DOS or TCL language, mostly the latter.
A TCL-based utility involves invocation of a new instance of TCL interpreter while providing it with the script to execute.

Common points for most TCL-based custom utilities supplied with Dualcam-Companion:
-- at the core stays some standalone TCL script with no logical relation to Dualcam-Companion, even though they may share some generic code
--- e.g. a script that does "borrow" a code from DualcamCompanion cannot exist outside of the full Dualcam-Companion package
--- but you can run this script from TCL console independently of Dualcam-Companion GUI
-- the script has numerous command-line options to adjust for various usage scenarious
--- in the context of Dualcam-Companion one prearranged set of arguments is supplied through a wrapper script - a separate one per each particular utility
-- all external tool paths are taken from a special CSV file whose path is provided through the "-tools_paths_file" command-line argument
--- format-wise it is the same as "dualcam_ext_tool_dirs.csv" from Dualcam-Companion, so sharing is recommended
-- when the Dualcam-Companion GUI invokes a script for a custom command (usually the wrapper), it guarantees that the script starts with current directory set to workarea root





Rotation and cropping

In most cases the images from the two cameras need rotation and/or crop before being fed to StereoPhotoMaker or alike.
Rotation is unambiguously defined by the cameras' arrangement, and there is no need to even consider such an unreliable factor as camera orientation sensor. E.g. if a camera stays bottom-down, its images need no rotation, while images from bottom-right camera require 90-degree clockwise rotation.
Cropping decision is mostly up to the user, though cameras' arrangement do dictate certain limitations. For instance, if the cameras stay perpendicular to each other, the intersection is a quadrant; StereoPhotoMaker won't cut it by itself, since it requires that the two images have equal orientation.

The supplied rotation utility is TCL-based; there is a file with core functionality and wrappers that adapt it for Dualcam-Companion.
In order to run rotate-and-crop utility from Dualcam-Companion GUI, open Preferences window and type one of the following in the entry for one of the custom commands:
- full path to 'StereoPairs/StereoPairs_TCL/goodies/wrap__run_tcl_rotate_and_crop.bat'
- just type  goodies/run__rotate_and_crop_on_l_r.tcl .


Files involved:
* StereoPairs\StereoPairs_TCL\goodies\rotate_and_crop.tcl
-- the core standalone rotation and cropping TCL script
-- rotates and/or crops all images of specified type(s) under a given directory
-- 4 rotation angles permitted: 0, 90, 80, 270 degrees
-- crop performed around the image center to achieve specified width-to-length ratio with maximum image area
-- supports padding images (horizontally and vertically) on top of the cropped area; pads specified in percents
--- note, padding is mandatory if lens axes aren't vertically aligned - like in the vertical DualCam
-- in order to enable rerun for the case of failure, the script marks already-processed images and ignores them when (and if) it runs again; image-comment metadata field is used for this mark
* StereoPairs\StereoPairs_TCL\goodies\run__rotate_and_crop_on_l_r.tcl
-- a small TCL script that adapts the rather generic rotate_and_crop.tcl to the context of Dualcam-Companion
-- loads the code from rotate_and_crop.tcl script and runs it with prearranged arguments
--- the script starts from defining user preferences for crop settings per camera arrangement in the rig
---- builds TCL dictionary 'g_cropPreferences' with the following set of fields per camera arrangement:
----- xyRat - sides' ratio (horizontal / vertical) of one image in the pair
----- pdX   - horizontal padding (%) - after the desired sides' ratio achieved; half of specified amount added to each side
----- pdY   - vertical   padding (%) - after the desired sides' ratio achieved; half of specified amount added to each side
--- setting the 'g_jpegQuality' variable allows the user to choose output quality for JPEG files
--- here is the outline of rotate_and_crop.tcl invocation lines
--------------------------------------------------------------------------------
## Load orientation spec from Dualcam-Companion preferences file and decide on rotation and crop parameters
## Load names of subdirectories with left/right images from Dualcam-Companion preferences file
### For example camera JPEG-s expected under L/ and R/, while results of supplied RAW-conversion script - under L/OUT/ and R/OUT/
## Execute the main procedure of "rotate_and_crop.tcl" script in subdirectory with left images
rotate_and_crop_main "-rot_angle $angleL -pad_x $padX -pad_y $padY -crop_ratio $xyRatio -final_depth 8 -inp_dir $subDirL -bu_subdir_name {BU} -img_extensions {JPG TIF} -jpeg_quality $::g_jpegQuality   -tools_paths_file [dualcam_find_toolpaths_file 0]"
## Execute the main procedure of "rotate_and_crop.tcl" script in subdirectory with right images
rotate_and_crop_main "-rot_angle $angleR -pad_x $padX -pad_y $padY -crop_ratio $xyRatio -final_depth 8 -inp_dir $subDirR -bu_subdir_name {BU} -img_extensions {JPG TIF} -jpeg_quality $::g_jpegQuality   -tools_paths_file [dualcam_find_toolpaths_file 0]"
--------------------------------------------------------------------------------
--- arguments '-inp_dir $subDirL', '-inp_dir $subDirR' tell to run rotation and cropping in subdirectories chosen according to the Preferences file (see above)
--- arguments '-rot_angle $angleL', '-rot_angle $angleR' specify rotation angles (clockwise) chosen automatically according to camera arrangement
--- arguments '-pad_x $padX', '-pad_y $padY', '-crop_ratio $xyRatio' tell geometrical parameters of the cropped area; configurable by the user through 'g_cropPreferences' dictionary at the top of the script
--- argument '-final_depth 8' tells to produce 8-bit-per-channel TIFF images as the output; the alternative is '-final_depth 16' for 16-bit-per-channel TIFF-s; the argument is irrelevant for JPEG files
--- argument '-bu_subdir_name {BU}' tells to save backup copies of the original images in subdirectory BU under the input directory
--- argument '-img_extensions {JPG TIF}' tells to process all images with extensions .JPG and .TIF under the input directory
--- argument '-jpeg_quality $::g_jpegQuality' specifies quality level for saving JPEG images; the argument is irrelevant for TIFF files
--- argument '-tools_paths_file [dualcam_find_toolpaths_file 0]' tells to take external tools paths from the same file that's provided for the main DualCam-Companion application
* StereoPairs\StereoPairs_TCL\goodies\wrap__run_tcl_rotate_and_crop.bat
-- represents the ultimate single-executable-path to be configured as a custom command in Dualcam-Companion GUI
-- actually this batch file is optional - one can directly configure "goodies/run__rotate_and_crop_on_l_r.tcl" in the Preferences
-- invokes new instance of TCL interpreter and tells it to execute run__rotate_and_crop_on_l_r.tcl
--- one can use any TCL interpreter, not necessarilly the one that runs Dualcam-Companion GUI
-- assumes that run_tcl_rotate_and_crop_on_l_r.bat resides in the same directory as wrap__run_tcl_rotate_and_crop.bat itself
--- includes batch utility "Assign_SCRIPT_DIR" to detect the directory of itself
-- doesn't contain any logic of rotation and cropping
---- the essense of wrap__run_tcl_rotate_and_crop.bat is in the following line: -----
  "C:\Program Files (x86)\etcl\bin\etcl.exe" "%SCRIPT_DIR%\run__rotate_and_crop_on_l_r.tcl"
  --------------------------------------------------------------------------------



RAW conversion

Dualcam-Companion doesn't enforce any particular method of RAW conversion. But its author developed one that automatically does very good job producing images perfectly suited for stereopairs. Specifically, it converts normally exposed images so that highlight details are mostly preserved, and shadow details are considerably improved compared to default conversions. Sometimes it's possible to do better with manually controled conversion, but one should work hard to achieve even equal results. Moreover, the resulting images are normalized brightness-wise, so that small exposure differences between left and right images are automatically eliminated.
This flow won't handle that well low-key and high-key photos, but frankly speaking stereophotography is mostly about normal exposures.

For each image this RAW processing flow does three dcraw conversions with different brightness values, then merges them together while choosing the "best" of three options for each and every pixel. It takes time and a lot of disk space, but the quality of results and fully automatic operation are worth it.

The following external utilities are being used:
- dcraw               - www.cybercom.net/~dcoffin/dcraw
- Imagemagick suite   - www.imagemagick.org
- enfuse              - enblend.sourceforge.net

In the context of stereopair processing for Dualcam-Companion, RAW conversion should be run _after_ the RAW images are renamed (to reflect their roles in stereopairs).

RAW conversion by DOS batch
It was historically the first implementation of the RAW conversion flow; newer TCL version is better; this one is brought as a practical example of a native custom command.
In order to run DOS_batch based raw-conversion utility from Dualcam-Companion GUI:
- open Preferences window and type full path to 'StereoPairs\StereoPairs_TCL\goodies\wrap__run_raw_to_hdr.bat' in the entry for one of the custom commands
- open the 'StereoPairs\StereoPairs_TCL\goodies\raw_to_hdr.bat' script code itself and change tools' paths to fit your computer.

Files involved:
* StereoPairs\StereoPairs_TCL\goodies\raw_to_hdr.bat
-- the standalone RAW conversion DOS-batch script with no relation to Dualcam-Companion
-- all external tool paths are hardcoded inside the script
--- thus require adjustment by each individual user
-- only a single RAW-file extension is supported, and it's hardcoded inside the script
--- it ships with RAW extension of .arw - as produced by Sony Alpha cameras
-- converts all RAWs found in the current directory
-- the resulting images are placed under OUT\ subdirectory under the current directory
* StereoPairs\StereoPairs_TCL\goodies\run__raw_to_hdr_on_l_r.bat
-- invokes raw_to_hdr.bat (raw conversion) in subdirectories L\ and R\ of the current directory
--- thus it concentrates the logic of running RAW conversions for a DualCam session working directory by means of raw_to_hdr.bat
-- when finished, restores the working directory to the one where it started
-- assumes that raw_to_hdr.bat resides in the same directory as run__raw_to_hdr_on_l_r.bat itself
--- includes batch utility "Assign_SCRIPT_DIR" to detect the directory of itself
---- the essense of run__raw_to_hdr_on_l_r.bat is in the following lines: ------
  cd L
  call %SCRIPT_DIR%\raw_to_hdr.bat
  cd ..\R
  call %SCRIPT_DIR%\raw_to_hdr.bat
  cd ..\
--------------------------------------------------------------------------------
* StereoPairs\StereoPairs_TCL\goodies\wrap__run__raw_to_hdr.bat
-- represents the ultimate single-executable-path to be configured as a custom command in Dualcam-Companion GUI
-- invokes run__raw_to_hdr_on_l_r.bat in a new DOS command window
-- assumes that run__raw_to_hdr_on_l_r.bat resides in the same directory as wrap__run__raw_to_hdr.bat itself
--- includes batch utility "Assign_SCRIPT_DIR" to detect the directory of itself
-- doesn't contain any logic of RAW conversion
---- the essense of wrap__run__raw_to_hdr.bat is in the following lines: -------
  start cmd /k %SCRIPT_DIR%\run__raw_to_hdr_on_l_r.bat
--------------------------------------------------------------------------------


RAW conversion by TCL script
Involves invocation of a new instance of TCL interpreter while providing it with the script to execute.
In order to run TCL based raw-conversion utility from Dualcam-Companion GUI:
- open Preferences window and type one of the following in the entry for one of the custom commands:
-- (a) full path to 'StereoPairs/StereoPairs_TCL/goodies/wrap__run_tcl_raw_to_hdr.bat'
-- (b) just type  goodies/run__raw_to_hdr_on_l_r.tcl .
- add path to the directory with "enfuse" in '<YOUR-HOME-FOLDER>\dualcam_ext_tool_dirs.csv' - open Preferences window, press "Tools..." and use "Enfuse folder" button to choose the directory path
- optionally provide a _full_ (absolute) path for the temporary directory - through "-tmp_dir_for_custom_cmd" switch in the preferences; if not given, a "TMP" subdirectory under the workarea root is used

Why explicitly provided temporary directory is important?
The RAW-conversion flow produces enormous amount of temporary data - around 2 Giga per a stereopair shot with two 20-megapixel cameras. About 80% of it could be redirected to the explicitly given temporary directory.
Typical usage scenarios:
- if you have SSD, you'd better not wear it off by excessive writting
- if you are working with tablet and using memory card as the storage, RAW conversion is painfully slow; having the temporary directory on USB3 disk brings significant speed-up.

Files involved:
* StereoPairs\StereoPairs_TCL\goodies\raw_to_hdr.tcl
-- the core standalone RAW conversion TCL script
--- converts any RAW images, not necessarily stereopairs
--- in the context of Dualcam-Companion one prearranged set of arguments is supplied through a wrapper script (run__raw_to_hdr_on_l_r.tcl)
-- list with names of directories with RAWs for the conversion is accepted in "-inp_dirs" command-line argument
--- one can process any number of directories in one invocation
--- the syntax is that of TCL list: {NAME1 NAME2 ... }
* StereoPairs\StereoPairs_TCL\goodies\run__raw_to_hdr_on_l_r.tcl
-- a small TCL script that adapts the rather generic raw_to_hdr.tcl to the context of Dualcam-Companion
-- loads the code from raw_to_hdr.tcl script and runs it with prearranged arguments
--- here is the outline of raw_to_hdr.tcl invocation lines
--------------------------------------------------------------------------------
## If file "wb_ovrd_left.csv" exists, it provides external override for white-balance;
##   if so, build input-white-balance argument for L/ subdirectory:
##     set INP_WB_OVRD "-wb_inp_file wb_ovrd_left.csv"
#### Execute the main procedure of "raw_to_hdr.tcl" script in L/ subdirectory
raw_to_hdr_main "-inp_dirs {L} -out_subdir_name OUT -final_depth 8 -raw_ext ARW -rotate 0  -wb_out_file wb_left.csv $INP_WB_OVRD   -tools_paths_file [dualcam_find_toolpaths_file 0] -do_skip_existing 1"
## Change image-file names in WB file created while pocessing left directory
##     into names of their right peers; save in "wb_ovrd_right.csv"
_swap_lr_names_in_csv_file "wb_left.csv" "wb_ovrd_right.csv" 0 "white-balance-sync"]
#### Execute the main procedure of "raw_to_hdr.tcl" script in R/ subdirectory
raw_to_hdr_main "-inp_dirs {R} -out_subdir_name OUT -final_depth 8 -raw_ext ARW  -wb_out_file wb_right.csv -wb_inp_file wb_ovrd_right.csv  -tools_paths_file [dualcam_find_toolpaths_file 0]"
--------------------------------------------------------------------------------
--- arguments '-inp_dirs {L}', '-inp_dirs {R}' tell to run RAW conversion in subdirectories L/ or R/ of the current workarea directory respectively
--- argument '-out_subdir_name OUT' tells to put ultimate images in subdirectories L/OUT/ and R/OUT/ of the current workarea directory
--- argument '-tmp_dir_path <PATH>' - the temporary directory path - is packed into "TMP_DIR_ARG__OR_EMPTY" variable; the wrapper sets it according to '- tmp_dir_for_custom_cmd' switch in the Dualcam-Companion preferences; if this switch is absent (the corresponding entry is empty in the GUI), '-tmp_dir_path' argument is ommited; in this case the RAW-conversion script will use its default path (a subdirectory under the workarea root)
--- argument '-final_depth 8' tells to produce 8-bit-per-channel TIFF images as the output; the alternative is '-final_depth 16' for 16-bit-per-channel TIFF-s
--- argument '-raw_ext ARW' tells the extension of input RAW images; ARW is Sony-Alpha RAW
--- the combination of arguments '-wb_out_file NAME2.csv -wb_inp_file NAME1.csv' tells that RAW-conversion should read white-balance parameters (RGB multipliers per an image for dcraw) from file "NAME1.csv" in the current workarea directory, and write the white-balance parameters it used for each image into file "NAME2.csv" in the same directory
--- the script feeds white-balance parameters used on left images to the conversion of their right peers
------ this always guarantees that left- and right images of one stereopair obtain the same white-balance processing
------ achieved by means of -wb_inp_file/-wb_out_file arguments and adaptation of white-balance output from directory L/ into white-balance input for directory R/
------ format of white-balance input/output file could be learned from "Doc/EXAMPLE__wb_dir1.csv" provided with DualCam-Companion
------------ white-balance input- and output files share the same syntax
--- argument '-tools_paths_file [dualcam_find_toolpaths_file 0]' tells to take external tools paths from the same file that's provided for the main DualCam-Companion application
------ the syntax is simply '-tools_paths_file FILEPATH'; the prearranged example uses a function from DualCam-Companion to locate the file
--- argument ' -do_skip_existing 1' tells not to regenerate intermediate or output files that already exist; this enables fool-proof rerun of the script in the case of failure - only the missing or corrupted images will be produced
* StereoPairs\StereoPairs_TCL\goodies\wrap__run_tcl_raw_to_hdr.bat
-- represents the ultimate single-executable-path to be configured as a custom command in Dualcam-Companion GUI
-- actually this batch file is optional - one can directly configure "goodies/run__raw_to_hdr_on_l_r.tcl" in the Preferences
-- invokes new instance of TCL interpreter and tells it to execute run__raw_to_hdr_on_l_r.tcl
--- one can use any TCL interpreter, not necessarilly the one that runs Dualcam-Companion GUI
-- assumes that run_tcl_raw_to_hdr_on_l_r.bat resides in the same directory as wrap__run_tcl_raw_to_hdr.bat itself
--- includes batch utility "Assign_SCRIPT_DIR" to detect the directory of itself
-- doesn't contain any logic of RAW conversion
---- the essense of wrap__run_tcl_raw_to_hdr.bat is in the following line: -----
  "C:\Program Files (x86)\etcl\bin\etcl.exe" "%SCRIPT_DIR%\run__raw_to_hdr_on_l_r.tcl"
--------------------------------------------------------------------------------
* <YOUR-HOME-FOLDER>\dualcam_ext_tool_dirs.csv
-- tells DualCam-Companion the paths of external tools
-- raw_to_hdr.tcl needs all the tools that DualCam-Companion does, with addition of "enfuse"
--- thus it's recommended to add a line for "enfuse" into dualcam_ext_tool_dirs.csv, and use the later in both DualCam-Companion and raw_to_hdr.tcl
-- then, raw_to_hdr.tcl is more likely to require explicit path to dcraw
--- the author continuously ran across dcraw included in Imagemagick that didn't handle conversion of RAWs from Sony Alpha 5000, while it did read their EXIF timestamps
---- only the latter is essential for the main functionality of DualCam-Companion
-- you can edit the paths from DualCam-Companion GUI (Preferences...->Tools...)
-- see the format of dualcam_ext_tool_dirs.csv in DualCam-Companion user-guide
-- you can use supplied "Doc/EXAMPLE__ext_tool_dirs.csv" file as the starting point
TODO
--------------------------------------------------------------------------------



RAW conversion followed by rotation and cropping

A logical extension of having utilities for the two operations is to build a combined action that runs both.
In order to invoke it from Dualcam-Companion GUI, set one of custom commands in preferences window to goodies/run__raw_to_hdr_rotate_and_crop.tcl .

Files involved:
* StereoPairs\StereoPairs_TCL\goodies\run__raw_to_hdr_on_l_r.tcl
-- see "RAW conversion by TCL script" section
* StereoPairs\StereoPairs_TCL\goodies\run__rotate_and_crop_on_l_r.tcl
-- see "Rotation and cropping" section
* StereoPairs\StereoPairs_TCL\goodies\run__raw_to_hdr_rotate_and_crop.tcl
-- a small TCL script that runs RAW conversion followed by rotate-and-crop
--- runs the RAW conversion by sourcing "run__raw_to_hdr_on_l_r.tcl" script
--- if RAW conversion script reported success (returned 1),  runs rotation and crop by sourcing "run__rotate_and_crop_on_l_r.tcl" script
---- the rotation-and-cropping script relies on Preferences (-left_img_subdir, -right_img_subdir) to learn where RAW conversion puts its output images
* StereoPairs\StereoPairs_TCL\goodies\wrap__run_tcl_raw_to_hdr_rotate_and_crop.bat
-- represents the ultimate single-executable-path to be configured as a custom command in Dualcam-Companion GUI
-- actually this batch file is optional - one can directly configure "goodies/run__raw_to_hdr_rotate_and_crop.tcl" in the Preferences


Generating stereocards for free viewing.

If side-by-side parallel stereo image has width smaller that inter-eye distance, one can view it with naked eyes. So, stereopairs printed so that the width stays below ~6.4cm, are suitable for free viewing. The same applies to on-screen viewing, though has less practical significance. The pictures are small, so it's worth to have as large a resolution as the eye can resolve - e.g. either printed photo or 300 DPI screen.
The included utility "make_stereocards.tcl" generates pages of four stereopairs each, so that a page fits into 10*15cm photo-paper sheet when assuming resolution of 300 DPI.

Files involved:
* StereoPairs\StereoPairs_TCL\goodies\make_stereocards.tcl
-- the core stereocard generation utility
-- needs to be run from the directory where input stereo images reside
-- invocation:  make_cards_in_current_dir <ext> <pairWidthCm> <origWhRatio>  
--- the parameters are file extension, width of one stereopair in cm, and width/height ratio of the input images
---- having sides' ratio as parameter implies all images in one session comply with it (which is a good practice anyway)
----- though small variations won't do any harm
-- the pages' image files are created in Cards/ subdirectory of the current folder
-- the script relies on ImageMagick; takes its location from the tools' CSV file compatible with that of DualCam-Companion
--- if the tools' file from DualCam-Companion exists, reads ImageMagick path from it, otherwise - attempts "ext_tool_dirs.csv" from one directory above that of "make_stereocards.tcl" itself
* StereoPairs\StereoPairs_TCL\goodies\run__make_stereocards.tcl
-- a small TCL script that adapts the rather generic make_stereocards.tcl to the context of Dualcam-Companion
-- loads the code from make_stereocards.tcl script and runs it with prearranged arguments
--- here is the outline of make_stereocards.tcl invocation lines
--------------------------------------------------------------------------------
## Load orientation spec from preferences and decide on sides ratio
## Load location of final images from preferences - they are inputs for stereocards
## Change directory to that of the final images
# Execute the main procedure of "make_stereocards.tcl" script twice - for TIFF and JPEG files
# (a typical workflow produces one of these image types, so one of the two runs will do the job)
foreach ext {tif jpg} { make_cards_in_current_dir $ext 6.4 $sidesRatio }
-- width is preset to 6.4 cm
## Return to the directory where the script started - which is the  work-area root directory



========================================================================
A background on invoking DOS commands
========================================================================
(from: http://stackoverflow.com/questions/9392874/bat-file-open-new-cmd-window-and-enter-code-in-there)


Use the following in your batch file:

start cmd.exe /k "more-batch-commands-here"

or

start cmd.exe /c "more-batch-commands-here"

    /c Carries out the command specified by string and then terminates
    /k Carries out the command specified by string but remains

Consult the cmd.exe documentation using cmd /? for more details.

The proper formating of the command string gets a little more complicated with spaces in the arguments. See the examples below. Note the use of nested double quotes in some examples.

Examples:

Run a program and pass a filename parameter:
CMD /c write.exe c:\docs\sample.txt

Run a program and pass a long filename:
CMD /c write.exe "c:\sample documents\sample.txt"

Spaces in program path:
CMD /c ""c:\Program Files\Microsoft Office\Office\Winword.exe""

Spaces in program path + parameters:
CMD /c ""c:\Program Files\demo.cmd"" Parameter1 Param2
CMD /k ""c:\batch files\demo.cmd" "Parameter 1 with space" "Parameter2 with space""

Launch demo1 and demo2:
CMD /c ""c:\Program Files\demo1.cmd" & "c:\Program Files\demo2.cmd""
========================================================================
