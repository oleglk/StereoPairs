A stereo-photo processing workflow of an advanced user may involve steps that the author of DualCam-Companion application never thought about. Such a possibility is addressed by providing custom-command buttons.

DualCam-Companion application enables the user to configure up to two arbitrary commands to be invoked through its GUI buttons. These buttons are "Cust1" and "Cust2".
The commands should be those from the user computer's operating system, not TCL procedures. E.g. whatever you can run from the computer's command prompt.

The intention is for custom command to run in a separate window, so that its possible failure cannot hurt the DualCam-Companion from which it is launched.

In brief:
- the user provides OS-specific command line for the command
- upon pressing the corresponding button, DualCam-Companion runs the command line while ensuring the current directory (for the command) is set to the current workarea root (above L/ and R/ subdirectories)
- the DualCam-Companion GUI remains unresponsive until the command is finished; if the commnad has separate window, the latter should be closed for DualCam-Companion GUI to become operational again
- the DualCam-Companion GUI does not recognize whether the command succeeded or failed
-- if the commnad has separate window, the latter contains the indication of the command's status
-- if the commnad doesn't have separate window, all or part of the command's text output is copied into the log box of DualCam-Companion GUI when the command's execution is finished or aborted

Command lines for the two custom commands are configured under "-custom_cmd_1" and "-custom_cmd_2" switches in the Preferences window.
The safest practice is to enter only full path to an executable file in the Preferences. The executable could be either a real executable binary (.exe on Windows) or a shell script (batch file on Windows). In case this executable needs any command-line arguments, wrap it in a shell script (DOS batch on Windows); handle the argumennts inside this script.
The path stored in the Preferences should follow TCL syntax convention where slash (/) is used as a directory separator.

Building and configuring proper wrappers for custom commands.
------------------------------------------------------------

This section explains arrangements for supplement utilities supplied with Dualcam-Companion. It should help the users to configure most other commands by following a similar methodology.
The main idea is that the application to be run as a custom command is considered a "black box". The user shouldn't bother with how it works or how it is implemented. Instead the user only knows what the application does and how to control it through the command line. The user should supply wrapper scripts that adapt the application's command line to the single executable path entered in DualCam-Companion Preferences.


RAW conversion

Dualcam-Companion doesn't enforce any particular method of RAW conversion. But its author developed one that automatically does very good job producing images perfectly suited for stereopairs. Specifically, it converts normally exposed images so that highlight details are mostly preserved, and shadow details are considerably improved compared to default conversions. Sometimes it's possible to do better with manually controled conversion, but one should work hard to achieve even equal results. Moreover, the resulting images are normalized brightness-wise, so that small exposure differences between left and right images are automatically eliminated.
This flow won't handle that well low-key and high-key photos, but frankly speaking stereophotography is mostly about normal exposures.

For each image this RAW processing flow does three dcraw conversions with different brightness values, then merges them together while choosing the "best" of three options for each and every pixel. It takes time and a lot of disk space, but the quality of results and fully automatic operation are worth it.

The following external utilities are being used:
- dcraw               - www.cybercom.net/~dcoffin/dcraw
- Imagemagick suite   - www.imagemagick.org
- enfuse              - enblend.sourceforge.net

In the context of stereopair processing for Dualcam-Companion, RAW conversion should be run _after_ the RAW images are renamed (to reflect their roles in stereopairs).

RAW conversion by DOS batch
It was historically the first implementation of the RAW conversion flow; newer TCL version is better; this one is brought as a practical example of a native custom command.
Files involved:
* StereoPairs\StereoPairs_TCL\goodies\raw_to_hdr.bat
-- the standalone RAW conversion DOS-batch script with no relation to Dualcam-Companion
-- all external tool paths are hardcoded inside the script
--- thus require adjustment by each individual user
-- only a single RAW-file extension is supported, and it's hardcoded inside the script
--- it ships with RAW extension of .arw - as produced by Sony Alpha cameras
-- converts all RAWs found in the current directory
-- the resulting images are placed under OUT\ subdirectory under the current directory
* StereoPairs\StereoPairs_TCL\goodies\run__raw_to_hdr_on_l_r.bat
-- invokes raw_to_hdr.bat (raw conversion) in subdirectories L\ and R\ of the current directory
--- thus it concentrates the logic of running RAW conversions for a DualCam session working directory by means of raw_to_hdr.bat
-- when finished, restores the working directory to the one where it started
-- assumes that raw_to_hdr.bat resides in the same directory as run__raw_to_hdr_on_l_r.bat itself
--- includes batch utility "Assign_SCRIPT_DIR" to detect the directory of itself
---- the essense of run__raw_to_hdr_on_l_r.bat is in the following lines: ------
  cd L
  call %SCRIPT_DIR%\raw_to_hdr.bat
  cd ..\R
  call %SCRIPT_DIR%\raw_to_hdr.bat
  cd ..\
--------------------------------------------------------------------------------
* StereoPairs\StereoPairs_TCL\goodies\wrap__run__raw_to_hdr.bat
-- represents the ultimate single-executable-path to be configured as a custom command in Dualcam-Companion GUI
-- invokes run__raw_to_hdr_on_l_r.bat in a new DOS command window
-- assumes that run__raw_to_hdr_on_l_r.bat resides in the same directory as wrap__run__raw_to_hdr.bat itself
--- includes batch utility "Assign_SCRIPT_DIR" to detect the directory of itself
-- doesn't contain any logic of RAW conversion
---- the essense of wrap__run__raw_to_hdr.bat is in the following lines: -------
  start cmd /k %SCRIPT_DIR%\run__raw_to_hdr_on_l_r.bat
--------------------------------------------------------------------------------


RAW conversion by TCL script
Involves invocation of a new instance of TCL interpreter while providing it with the script to execute.

Files involved:
* StereoPairs\StereoPairs_TCL\goodies\raw_to_hdr.tcl
-- the standalone RAW conversion TCL script with no logical relation to Dualcam-Companion, even though they share some generic code
--- e.g. raw_to_hdr.tcl cannot exist outside of the full Dualcam-Companion package
--- but you can run raw_to_hdr.tcl from TCL console independently of Dualcam-Companion GUI; it converts any RAW images, not necessarily stereopairs
-- raw_to_hdr.tcl has numerous command-line options to adjust for various usage scenarious
--- in the context of Dualcam-Companion one prearranged set of arguments is supplied through a wrapper script (run__raw_to_hdr_on_l_r.tcl)
-- all external tool paths are taken from a special CSV file whose path is provided through the "-tools_paths_file" command-line argument
--- format-wise it is the same as "ext_tool_dirs.csv" from Dualcam-Companion, so sharing is recommended 
-- list with names of directories with RAWs for the conversion is accepted in "-inp_dirs" command-line argument
--- one can process any number of directories in one invocation
--- the syntax is that of TCL list: {NAME1 NAME2 ... }
* StereoPairs\StereoPairs_TCL\goodies\run__raw_to_hdr_on_l_r.tcl
-- a tiny TCL script that adapts the rather generic raw_to_hdr.tcl to the context of Dualcam-Companion
-- loads the code from raw_to_hdr.tcl script and runs it with prearranged arguments
--- here is the raw_to_hdr.tcl invocation line
--------------------------------------------------------------------------------
raw_to_hdr_main "-inp_dirs {L R} -out_subdir_name OUT -final_depth 8 -raw_ext ARW -wb_out_file wb_dir1.csv -wb_inp_file wb_dir1.csv  -tools_paths_file [file join $SCRIPT_DIR__raw_to_hdr ".." ".." ext_tool_dirs.csv]"
--------------------------------------------------------------------------------
--- argument '-inp_dirs {L R}' tells to run RAW conversion in subdirectories L/ and R/ of the current workarea directory - in this order
--- argument '-out_subdir_name OUT' tells to put ultimate images in subdirectories L/OUT/ and R/OUT/ of the current workarea directory
--- argument '-final_depth 8' tells to produce 8-bit-per-channel TIFF images as the output; the alternative is '-final_depth 16' for 16 8-bit-per-channel TIFF-s
--- argument '-raw_ext ARW' tells the extension of input RAW images; ARW is Sony-Alpha RAW
--- the combination of arguments '-wb_out_file wb_dir1.csv -wb_inp_file wb_dir1.csv' tells that RAW-conversion in each directory should both  read white-balance parameters (RGB multipliers per an image for dcraw) from file "wb_dir1.csv" in the current workarea directory, and write the white-balance parameters it used for each image into the same file
------ this always guarantees that left- and right images of one stereopair obtain the same white-balance processing
------ !!! doesn't work since L-R filenames differ !!! TODO: pre/post-process CSV between per-dir conversion runs
------ format of "wb_dir1.csv" could be learned from "Doc/EXAMPLE__wb_dir1.csv" provided with DualCam-Companion
------ TODO
--- argument '-tools_paths_file [file join $SCRIPT_DIR__raw_to_hdr ".." ".." ext_tool_dirs.csv]' tells to take external tools paths from the same file that's provided for the main DualCam-Companion application
------ the syntax is simply '-tools_paths_file FILEPATH'; the prearranged example uses OS-independent TCL approach of building file paths


TODO
* StereoPairs\ext_tool_dirs.csv
-- tells DualCam-Companion the paths of external tools
-- raw_to_hdr.tcl needs all the tools that DualCam-Companion does, with addition of "enfuse"
--- thus it's recommended to add a line for "enfuse" into ext_tool_dirs.csv, and use the later in both DualCam-Companion and raw_to_hdr.tcl
-- see the format of ext_tool_dirs.csv in DualCam-Companion user-guide
-- you can use supplied "Doc/EXAMPLE__ext_tool_dirs.csv" file as the starting point
TODO



TODO

========================================================================
A background on invoking DOS commands
========================================================================
(from: http://stackoverflow.com/questions/9392874/bat-file-open-new-cmd-window-and-enter-code-in-there)


Use the following in your batch file:

start cmd.exe /k "more-batch-commands-here"

or

start cmd.exe /c "more-batch-commands-here"

    /c Carries out the command specified by string and then terminates
    /k Carries out the command specified by string but remains

Consult the cmd.exe documentation using cmd /? for more details.

The proper formating of the command string gets a little more complicated with spaces in the arguments. See the examples below. Note the use of nested double quotes in some examples.

Examples:

Run a program and pass a filename parameter:
CMD /c write.exe c:\docs\sample.txt

Run a program and pass a long filename:
CMD /c write.exe "c:\sample documents\sample.txt"

Spaces in program path:
CMD /c ""c:\Program Files\Microsoft Office\Office\Winword.exe""

Spaces in program path + parameters:
CMD /c ""c:\Program Files\demo.cmd"" Parameter1 Param2
CMD /k ""c:\batch files\demo.cmd" "Parameter 1 with space" "Parameter2 with space""

Launch demo1 and demo2:
CMD /c ""c:\Program Files\demo1.cmd" & "c:\Program Files\demo2.cmd""
========================================================================
